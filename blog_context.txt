Directory Structure (from 'tree -aL 3 -I node_modules|blog_context.txt|bun.lockb|.svelte-kit|.git|.prettierrc|.prettierignore'):
```
.
├── .env
├── .env.example
├── .gitignore
├── .npmrc
├── README.md
├── drizzle.config.ts
├── eslint.config.js
├── local.db
├── package.json
├── src
│   ├── app.css
│   ├── app.d.ts
│   ├── app.html
│   ├── hooks.server.ts
│   ├── lib
│   │   ├── assets
│   │   ├── index.ts
│   │   └── server
│   └── routes
│       ├── +layout.svelte
│       ├── +page.server.ts
│       ├── +page.svelte
│       ├── [slug]
│       ├── demo
│       └── posts
├── static
│   └── robots.txt
├── svelte.config.js
├── tsconfig.json
└── vite.config.ts

10 directories, 21 files
```


.env:
```
DATABASE_URL=file:local.db
```

.env.example:
```
DATABASE_URL=file:local.db
```

.gitignore:
```
node_modules

# Output
.output
.vercel
.netlify
.wrangler
/.svelte-kit
/build

# OS
.DS_Store
Thumbs.db

# Env
.env
.env.*
!.env.example
!.env.test

# Vite
vite.config.js.timestamp-*
vite.config.ts.timestamp-*

# SQLite
*.db
```

.npmrc:
```
engine-strict=true
```

README.md:
```
# sv

Everything you need to build a Svelte project, powered by [`sv`](https://github.com/sveltejs/cli).

## Creating a project

If you're seeing this, you've probably already done this step. Congrats!

```sh
# create a new project in the current directory
npx sv create

# create a new project in my-app
npx sv create my-app
```

## Developing

Once you've created a project and installed dependencies with `npm install` (or `pnpm install` or `yarn`), start a development server:

```sh
npm run dev

# or start the server and open the app in a new browser tab
npm run dev -- --open
```

## Building

To create a production version of your app:

```sh
npm run build
```

You can preview the production build with `npm run preview`.

> To deploy your app, you may need to install an [adapter](https://svelte.dev/docs/kit/adapters) for your target environment.
```

drizzle.config.ts:
```
import { defineConfig } from 'drizzle-kit';

if (!process.env.DATABASE_URL) throw new Error('DATABASE_URL is not set');

export default defineConfig({
	schema: './src/lib/server/db/schema.ts',
	dialect: 'sqlite',
	dbCredentials: { url: process.env.DATABASE_URL },
	verbose: true,
	strict: true
});
```

eslint.config.js:
```
import prettier from 'eslint-config-prettier';
import { includeIgnoreFile } from '@eslint/compat';
import js from '@eslint/js';
import svelte from 'eslint-plugin-svelte';
import globals from 'globals';
import { fileURLToPath } from 'node:url';
import ts from 'typescript-eslint';
import svelteConfig from './svelte.config.js';

const gitignorePath = fileURLToPath(new URL('./.gitignore', import.meta.url));

export default ts.config(
	includeIgnoreFile(gitignorePath),
	js.configs.recommended,
	...ts.configs.recommended,
	...svelte.configs.recommended,
	prettier,
	...svelte.configs.prettier,
	{
		languageOptions: {
			globals: { ...globals.browser, ...globals.node }
		},
		rules: {
			// typescript-eslint strongly recommend that you do not use the no-undef lint rule on TypeScript projects.
			// see: https://typescript-eslint.io/troubleshooting/faqs/eslint/#i-get-errors-from-the-no-undef-rule-about-global-variables-not-being-defined-even-though-there-are-no-typescript-errors
			'no-undef': 'off'
		}
	},
	{
		files: ['**/*.svelte', '**/*.svelte.ts', '**/*.svelte.js'],
		languageOptions: {
			parserOptions: {
				projectService: true,
				extraFileExtensions: ['.svelte'],
				parser: ts.parser,
				svelteConfig
			}
		}
	}
);
```

package.json:
```
{
	"name": "blog",
	"private": true,
	"version": "0.0.1",
	"type": "module",
	"scripts": {
		"dev": "vite dev",
		"build": "vite build",
		"preview": "vite preview",
		"prepare": "svelte-kit sync || echo ''",
		"check": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json",
		"check:watch": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json --watch",
		"format": "prettier --write .",
		"lint": "prettier --check . && eslint .",
		"db:push": "drizzle-kit push",
		"db:generate": "drizzle-kit generate",
		"db:migrate": "drizzle-kit migrate",
		"db:studio": "drizzle-kit studio"
	},
	"devDependencies": {
		"@eslint/compat": "^1.2.5",
		"@eslint/js": "^9.18.0",
		"@libsql/client": "^0.14.0",
		"@oslojs/crypto": "^1.0.1",
		"@oslojs/encoding": "^1.1.0",
		"@sveltejs/adapter-node": "^5.2.12",
		"@sveltejs/kit": "^2.27.0",
		"@sveltejs/vite-plugin-svelte": "^6.0.0",
		"@tailwindcss/forms": "^0.5.9",
		"@tailwindcss/typography": "^0.5.15",
		"@tailwindcss/vite": "^4.0.0",
		"@types/marked": "^6.0.0",
		"@types/node": "^22",
		"drizzle-kit": "^0.30.2",
		"drizzle-orm": "^0.40.0",
		"eslint": "^9.18.0",
		"eslint-config-prettier": "^10.0.1",
		"eslint-plugin-svelte": "^3.0.0",
		"globals": "^16.0.0",
		"mdsvex": "^0.12.3",
		"prettier": "^3.4.2",
		"prettier-plugin-svelte": "^3.3.3",
		"prettier-plugin-tailwindcss": "^0.6.11",
		"svelte": "^5.0.0",
		"svelte-check": "^4.0.0",
		"tailwindcss": "^4.0.0",
		"typescript": "^5.0.0",
		"typescript-eslint": "^8.20.0",
		"vite": "^7.0.4"
	},
	"dependencies": {
		"@lucia-auth/adapter-drizzle": "^1.1.0",
		"@node-rs/argon2": "^2.0.2",
		"lucia": "^3.2.2",
		"marked": "^16.2.1"
	}
}
```

svelte.config.js:
```
import { mdsvex } from 'mdsvex';
import adapter from '@sveltejs/adapter-node';
import { vitePreprocess } from '@sveltejs/vite-plugin-svelte';

/** @type {import('@sveltejs/kit').Config} */
const config = {
	// Consult https://svelte.dev/docs/kit/integrations
	// for more information about preprocessors
	preprocess: [vitePreprocess(), mdsvex()],
	kit: {
    adapter: adapter(),
    experimental: {
      remoteFunctions: true
    }
  },
  compilerOptions: {
    experimental: {
      async: true
    }
  },
	extensions: ['.svelte', '.svx']
};

export default config;
```

tsconfig.json:
```
{
	"extends": "./.svelte-kit/tsconfig.json",
	"compilerOptions": {
		"allowJs": true,
		"checkJs": true,
		"esModuleInterop": true,
		"forceConsistentCasingInFileNames": true,
		"resolveJsonModule": true,
		"skipLibCheck": true,
		"sourceMap": true,
		"strict": true,
		"moduleResolution": "bundler"
	}
	// Path aliases are handled by https://svelte.dev/docs/kit/configuration#alias
	// except $lib which is handled by https://svelte.dev/docs/kit/configuration#files
	//
	// To make changes to top-level options such as include and exclude, we recommend extending
	// the generated config; see https://svelte.dev/docs/kit/configuration#typescript
}
```

vite.config.ts:
```
import tailwindcss from '@tailwindcss/vite';
import { sveltekit } from '@sveltejs/kit/vite';
import { defineConfig } from 'vite';

export default defineConfig({
	plugins: [tailwindcss(), sveltekit()]
});
```

static/robots.txt:
```
# allow crawling everything by default
User-agent: *
Disallow:
```

src/app.css:
```
@import 'tailwindcss';
@plugin '@tailwindcss/forms';
@plugin '@tailwindcss/typography';
```

src/app.d.ts:
```
// See https://svelte.dev/docs/kit/types#app.d.ts
// for information about these interfaces
declare global {
  namespace App {
    interface Locals {
      user: import('$lib/server/auth').SessionValidationResult['user'];
      session: import('$lib/server/auth').SessionValidationResult['session'];
    }
  } // interface Error {}
  // interface Locals {}
} // interface PageData {}
// interface PageState {}

// interface Platform {}
export {};
```

src/app.html:
```
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    %sveltekit.head%
  </head>
  <body data-sveltekit-preload-data="hover">
    <div style="display: contents">%sveltekit.body%</div>
  </body>
</html>
```

src/hooks.server.ts:
```
import { lucia } from '$lib/server/auth';
import type { Handle } from '@sveltejs/kit';

export const handle: Handle = async ({ event, resolve }) => {
    // Get session ID from the cookie
    const session_id = event.cookies.get(lucia.sessionCookieName);
    if (!session_id) {
        event.locals.user = null;
        event.locals.session = null;
        return resolve(event);
    }

    // Validate the session
    const { session, user } = await lucia.validateSession(session_id);

    // If session is fresh, create a new cookie with an updated expiration time
    if (session?.fresh) {
        const session_cookie = lucia.createSessionCookie(session.id);
        event.cookies.set(session_cookie.name, session_cookie.value, {
            path: '.',
            ...session_cookie.attributes
        });
    }

    // If session is invalid, create a blank cookie to remove the old one
    if (!session) {
        const session_cookie = lucia.createBlankSessionCookie();
        event.cookies.set(session_cookie.name, session_cookie.value, {
            path: '.',
            ...session_cookie.attributes
        });
    }

    // Make user and session available on `event.locals`
    event.locals.user = user;
    event.locals.session = session;

    return resolve(event);
};
```

src/lib/index.ts:
```
// place files you want to import through the `$lib` alias in this folder.
```

src/lib/server/auth.ts:
```
import { Lucia } from 'lucia';
import { DrizzleSQLiteAdapter } from '@lucia-auth/adapter-drizzle';
import { db } from '$lib/server/db';
import { session, user } from '$lib/server/db/schema';

// Create the Drizzle adapter
const adapter = new DrizzleSQLiteAdapter(db, session, user);

// Instantiate Lucia
export const lucia = new Lucia(adapter, {
    sessionCookie: {
          attributes: {
              // set to `true` when using https
              secure: process.env.NODE_ENV === 'production'
          }
    },
    getUserAttributes: (attributes) => {
        // This defines what data is available on the `user` object
        // in `event.locals.user`
        return {
            username: attributes.username
        };
    }
});

// IMPORTANT!
declare module 'lucia' {
    interface Register {
        Lucia: typeof lucia;
        DatabaseUserAttributes: DatabaseUserAttributes;
    }
}

interface DatabaseUserAttributes {
    username: string;
}
```

src/lib/server/db/index.ts:
```
import { drizzle } from 'drizzle-orm/libsql';
import { createClient } from '@libsql/client';
import * as schema from './schema';
import { env } from '$env/dynamic/private';

if (!env.DATABASE_URL) throw new Error('DATABASE_URL is not set');

const client = createClient({ url: env.DATABASE_URL });

export const db = drizzle(client, { schema });
```

src/lib/server/db/schema.ts:
```
import { sqliteTable, integer, text } from 'drizzle-orm/sqlite-core';
import { relations } from 'drizzle-orm';

// --- TABLES ---

export const user = sqliteTable('user', {
  id: text('id').primaryKey(),
  username: text('username').notNull().unique(),
  // JS: passwordHash, DB column: 'password_hash'
  passwordHash: text('password_hash').notNull()
});

export const session = sqliteTable('session', {
  id: text('id').primaryKey(),
  // JS: userId, DB column: 'user_id' (REQUIRED BY LUCIA)
  userId: text('user_id')
    .notNull()
    .references(() => user.id),
  // JS: expiresAt, DB column: 'expires_at' (REQUIRED BY LUCIA)
  expiresAt: integer('expires_at').notNull()
});

export const post = sqliteTable('post', {
  id: integer('id').primaryKey({ autoIncrement: true }),
  title: text('title').notNull(),
  slug: text('slug').notNull().unique(),
  // JS: markdownContent, DB column: 'markdown_content'
  markdownContent: text('markdown_content').notNull(),
  // JS: authorId, DB column: 'author_id'
  authorId: text('author_id')
    .notNull()
    .references(() => user.id),
  // JS: createdAt, DB column: 'created_at'
  createdAt: integer('created_at', { mode: 'timestamp' }).notNull().default(new Date())
});

export const comment = sqliteTable('comment', {
  id: integer('id').primaryKey({ autoIncrement: true }),
  content: text('content').notNull(),
  // JS: authorId, DB column: 'author_id'
  authorId: text('author_id')
    .notNull()
    .references(() => user.id),
  // JS: postId, DB column: 'post_id'
  postId: integer('post_id')
    .notNull()
    .references(() => post.id),
  // JS: createdAt, DB column: 'created_at'
  createdAt: integer('created_at', { mode: 'timestamp' }).notNull().default(new Date())
});


// --- RELATIONS ---

export const userRelations = relations(user, ({ many }) => ({
  posts: many(post),
  comments: many(comment)
}));

export const postRelations = relations(post, ({ one, many }) => ({
  author: one(user, {
    // IMPORTANT: Use the new camelCase property names here
    fields: [post.authorId],
    references: [user.id]
  }),
  comments: many(comment)
}));

export const commentRelations = relations(comment, ({ one }) => ({
  author: one(user, {
    // IMPORTANT: Use the new camelCase property names here
    fields: [comment.authorId],
    references: [user.id]
  }),
  post: one(post, {
    // IMPORTANT: Use the new camelCase property names here
    fields: [comment.postId],
    references: [post.id]
  })
}));


// --- TYPE EXPORTS ---

export type Session = typeof session.$inferSelect;
export type User = typeof user.$inferSelect;
export type Post = typeof post.$inferSelect;
export type Comment = typeof comment.$inferSelect;
```

src/lib/assets/favicon.svg:
```
<svg xmlns="http://www.w3.org/2000/svg" width="107" height="128" viewBox="0 0 107 128"><title>svelte-logo</title><path d="M94.157 22.819c-10.4-14.885-30.94-19.297-45.792-9.835L22.282 29.608A29.92 29.92 0 0 0 8.764 49.65a31.5 31.5 0 0 0 3.108 20.231 30 30 0 0 0-4.477 11.183 31.9 31.9 0 0 0 5.448 24.116c10.402 14.887 30.942 19.297 45.791 9.835l26.083-16.624A29.92 29.92 0 0 0 98.235 78.35a31.53 31.53 0 0 0-3.105-20.232 30 30 0 0 0 4.474-11.182 31.88 31.88 0 0 0-5.447-24.116" style="fill:#ff3e00"/><path d="M45.817 106.582a20.72 20.72 0 0 1-22.237-8.243 19.17 19.17 0 0 1-3.277-14.503 18 18 0 0 1 .624-2.435l.49-1.498 1.337.981a33.6 33.6 0 0 0 10.203 5.098l.97.294-.09.968a5.85 5.85 0 0 0 1.052 3.878 6.24 6.24 0 0 0 6.695 2.485 5.8 5.8 0 0 0 1.603-.704L69.27 76.28a5.43 5.43 0 0 0 2.45-3.631 5.8 5.8 0 0 0-.987-4.371 6.24 6.24 0 0 0-6.698-2.487 5.7 5.7 0 0 0-1.6.704l-9.953 6.345a19 19 0 0 1-5.296 2.326 20.72 20.72 0 0 1-22.237-8.243 19.17 19.17 0 0 1-3.277-14.502 17.99 17.99 0 0 1 8.13-12.052l26.081-16.623a19 19 0 0 1 5.3-2.329 20.72 20.72 0 0 1 22.237 8.243 19.17 19.17 0 0 1 3.277 14.503 18 18 0 0 1-.624 2.435l-.49 1.498-1.337-.98a33.6 33.6 0 0 0-10.203-5.1l-.97-.294.09-.968a5.86 5.86 0 0 0-1.052-3.878 6.24 6.24 0 0 0-6.696-2.485 5.8 5.8 0 0 0-1.602.704L37.73 51.72a5.42 5.42 0 0 0-2.449 3.63 5.79 5.79 0 0 0 .986 4.372 6.24 6.24 0 0 0 6.698 2.486 5.8 5.8 0 0 0 1.602-.704l9.952-6.342a19 19 0 0 1 5.295-2.328 20.72 20.72 0 0 1 22.237 8.242 19.17 19.17 0 0 1 3.277 14.503 18 18 0 0 1-8.13 12.053l-26.081 16.622a19 19 0 0 1-5.3 2.328" style="fill:#fff"/></svg>
```

src/routes/+layout.svelte:
```
<script lang="ts">
  import '../app.css';
  import favicon from '$lib/assets/favicon.svg';

  let { children } = $props();
</script>

<svelte:head>
  <link rel="icon" href={favicon} />
</svelte:head>

{@render children?.()}
```

src/routes/+page.server.ts:
```
import { db } from '$lib/server/db';
import { post, user } from '$lib/server/db/schema';
import { eq, desc } from 'drizzle-orm';
import type { PageServerLoad } from './$types';

export const load: PageServerLoad = async () => {
  // Query posts and join with the user table to get author's username
  const posts = await db
    .select({
      title: post.title,
      slug: post.slug,
      author: user.username,
      created_at: post.createdAt
    })
    .from(post)
    .innerJoin(user, eq(post.authorId, user.id))
    .orderBy(desc(post.createdAt)); // Show newest posts first

  return { posts };
};
```

src/routes/+page.svelte:
```
<script lang="ts">
  import type { PageData } from './$types';

  let { data }: { data: PageData } = $props();
</script>

<div class="max-w-2xl mx-auto py-8 px-4">
  <div class="flex justify-between items-center mb-8">
    <h1 class="text-3xl font-bold">My Blog</h1>
    <a href="/posts/new" class="rounded-md bg-indigo-600 px-4 py-2 text-white transition hover:bg-indigo-700">New Post</a>
  </div>

  <div class="space-y-8">
    {#each data.posts as post}
      <article>
        <h2 class="text-2xl font-semibold hover:text-indigo-600">
          <a href={`/blog/${post.slug}`}>{post.title}</a>
        </h2>
        <p class="text-sm text-gray-500 mt-1">
          By {post.author} on {new Date(post.created_at).toLocaleDateString()}
        </p>
      </article>
    {:else}
      <p>No posts yet. <a href="/posts/new" class="text-indigo-600 hover:underline">Write the first one!</a></p>
    {/each}
  </div>
</div>
```

src/routes/demo/+page.svelte:
```
<a href="/demo/lucia">lucia</a>
```

src/routes/demo/lucia/+page.server.ts:
```
import { lucia } from '$lib/server/auth'; // Import Lucia
import { fail, redirect } from '@sveltejs/kit';
import type { Actions, PageServerLoad } from './$types';

export const load: PageServerLoad = async ({ locals }) => {
    if (!locals.user) {
        throw redirect(302, '/demo/lucia/login');
    }
    return {
        user: locals.user
    };
};

export const actions: Actions = {
    logout: async (event) => {
        // Ensure there's a session to invalidate
        if (!event.locals.session) {
          return fail(401);
        }
        // Invalidate the session with Lucia
        await lucia.invalidateSession(event.locals.session.id);

        // Create a blank cookie to clear the session from the browser
        const session_cookie = lucia.createBlankSessionCookie();
        event.cookies.set(session_cookie.name, session_cookie.value, {
            path: '.',
            ...session_cookie.attributes
        });

        return redirect(302, '/demo/lucia/login');
    }
};
```

src/routes/demo/lucia/+page.svelte:
```
<script lang="ts">
	import { enhance } from '$app/forms';
	import type { PageServerData } from './$types';

	let { data }: { data: PageServerData } = $props();
</script>

<h1>Hi, {data.user.username}!</h1>
<p>Your user ID is {data.user.id}.</p>
<form method="post" action="?/logout" use:enhance>
	<button>Sign out</button>
</form>
```

src/routes/demo/lucia/login/+page.server.ts:
```
import { hash, verify } from '@node-rs/argon2';
import { generateId } from 'lucia'; // Use Lucia's ID generator
import { fail, redirect } from '@sveltejs/kit';
import { eq } from 'drizzle-orm';
import { lucia } from '$lib/server/auth';
import { db } from '$lib/server/db';
import * as table from '$lib/server/db/schema';
import type { Actions, PageServerLoad } from './$types';

export const load: PageServerLoad = async (event) => {
    if (event.locals.user) {
        return redirect(302, '/demo/lucia');
    }
    return {};
};

export const actions: Actions = {
    login: async (event) => {
        const formData = await event.request.formData();
        const username = formData.get('username');
        const password = formData.get('password');

        if (!validate_username(username)) {
            return fail(400, { message: 'Invalid username (min 3, max 31 characters, alphanumeric only)' });
        }
        if (!validate_password(password)) {
            return fail(400, { message: 'Invalid password (min 6, max 255 characters)' });
        }

        const [existing_user] = await db
            .select()
            .from(table.user)
            .where(eq(table.user.username, username));

        if (!existing_user) {
            return fail(400, { message: 'Incorrect username or password' });
        }

        const valid_password = await verify(existing_user.passwordHash, password);
        if (!valid_password) {
            return fail(400, { message: 'Incorrect username or password' });
        }

        // Create a session with Lucia
        const session = await lucia.createSession(existing_user.id, {});
        const session_cookie = lucia.createSessionCookie(session.id);
        event.cookies.set(session_cookie.name, session_cookie.value, {
            path: '.',
            ...session_cookie.attributes
        });

        return redirect(302, '/demo/lucia');
      },
      register: async (event) => {
          const formData = await event.request.formData();
          const username = formData.get('username');
          const password = formData.get('password');

        if (!validate_username(username)) {
            return fail(400, { message: 'Invalid username' });
        }
        if (!validate_password(password)) {
            return fail(400, { message: 'Invalid password' });
        }

        const userId = generateId(15); // Lucia's built-in ID generator
        const passwordHash = await hash(password, {
            memoryCost: 19456,
            timeCost: 2,
            outputLen: 32,
            parallelism: 1
        });

        try {
            // Drizzle will throw an error if username is not unique
            await db.insert(table.user).values({ id: userId, username, passwordHash });

            // Create a session with Lucia
            const session = await lucia.createSession(userId, {});
            const session_cookie = lucia.createSessionCookie(session.id);
            event.cookies.set(session_cookie.name, session_cookie.value, {
                path: '.',
                ...session_cookie.attributes
            });
        } catch (e) {
            console.error('Error during user registration:', e);
            // This is a common error when the username is already taken
            return fail(400, { message: 'Username already taken' });
        }
        return redirect(302, '/demo/lucia');
    }
};

// --- Validation functions remain the same ---
function validate_username(username: unknown): username is string {
    return (
        typeof username === 'string' &&
        username.length >= 3 &&
        username.length <= 31 &&
        /^[a-z0-9_-]+$/.test(username)
    );
}

function validate_password(password: unknown): password is string {
    return typeof password === 'string' && password.length >= 6 && password.length <= 255;
}
```

src/routes/demo/lucia/login/+page.svelte:
```
<script lang="ts">
	import { enhance } from '$app/forms';
	import type { ActionData } from './$types';

	let { form }: { form: ActionData } = $props();
</script>

<h1>Login/Register</h1>
<form method="post" action="?/login" use:enhance>
	<label>
		Username
		<input
			name="username"
			class="mt-1 rounded-md border border-gray-300 bg-white px-3 py-2 shadow-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-500 focus:outline-none"
		/>
	</label>
	<label>
		Password
		<input
			type="password"
			name="password"
			class="mt-1 rounded-md border border-gray-300 bg-white px-3 py-2 shadow-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-500 focus:outline-none"
		/>
	</label>
	<button class="rounded-md bg-blue-600 px-4 py-2 text-white transition hover:bg-blue-700"
		>Login</button
	>
	<button
		formaction="?/register"
		class="rounded-md bg-blue-600 px-4 py-2 text-white transition hover:bg-blue-700"
		>Register</button
	>
</form>
<p style="color: red">{form?.message ?? ''}</p>
```

src/routes/posts/new/+page.server.ts:
```
import { fail, redirect } from '@sveltejs/kit';
import { db } from '$lib/server/db';
import * as table from '$lib/server/db/schema';
import type { Actions, PageServerLoad } from './$types';

// This load function will run before the page loads.
// It protects the route so only logged in users can access it.
export const load: PageServerLoad = async (event) => {
    if (!event.locals.user) {
        return redirect(302, '/demo/lucia/login'); // Redirect to login page
    }
    return {};
};

export const actions: Actions = {
    default: async ({ request, locals }) => {
        // Ensure a user is logged in before processing the form
        if (!locals.user) {
            // message = 'You must be logged in to create a post.';
            return redirect(302, '/demo/lucia/login'); // Redirect to login page
        }

        const form_data = await request.formData();
        const title = form_data.get('title') as string;
        const markdownContent = form_data.get('content') as string;

        if (!title || !markdownContent) {
            return fail(400, { message: 'Title and content are required.' });
        }

        // Create a URL-friendly slug from the title
        const slug = title
            .toLowerCase()
            .replace(/\s+/g, '-') // Replace spaces with -
            .replace(/[^\w-]+/g, ''); // Remove all non-word chars

        try {
            // Insert the new post into the database
            await db.insert(table.post).values({
                title,
                slug: `${slug}-${Date.now()}`, // Ensure uniqueness by appending timestamp
                markdownContent,
                authorId: locals.user.id,
                createdAt: new Date()
            });
        } catch (e) {
            console.error('Database error while creating post:', e);
            return fail(500, { message: 'An error occurred while creating the post.' });
        }

        // Redirect to the blog index after creation
        return redirect(302, '/');
    }
};
```

src/routes/posts/new/+page.svelte:
```
<script lang="ts">
  import { enhance } from '$app/forms';
  import type { ActionData } from './$types';

  let { form }: { form: ActionData } = $props();
</script>

<div class="max-w-2xl mx-auto py-8 px-4">
  <h1 class="text-3xl font-bold mb-6">Create a New Post</h1>

  <form method="POST" use:enhance class="space-y-6">
    <div>
      <label for="title" class="block text-sm font-medium text-gray-700">Title</label>
      <input
        type="text"
        id="title"
        name="title"
        required
        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
      />
    </div>

    <div>
      <label for="content" class="block text-sm font-medium text-gray-700">Content (Markdown)</label>
      <textarea
        id="content"
        name="content"
        rows="10"
        required
        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 font-mono"
      ></textarea>
    </div>

    {#if form?.message}
      <p class="text-red-500">{form.message}</p>
    {/if}

    <div>
      <button
        type="submit"
        class="inline-flex justify-center rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
      >
        Publish
      </button>
    </div>
  </form>
</div>
```

src/routes/[slug]/+page.server.ts:
```
import { db } from '$lib/server/db';
import { post, user } from '$lib/server/db/schema';
import { eq } from 'drizzle-orm';
import { error } from '@sveltejs/kit';
import { marked } from 'marked';
import type { PageServerLoad } from './$types';

export const load: PageServerLoad = async ({ params }) => {
  const results = await db
    .select({
      title: post.title,
      markdown_content: post.markdownContent,
      author: user.username,
      created_at: post.createdAt
    })
    .from(post)
    .innerJoin(user, eq(post.authorId, user.id))
    .where(eq(post.slug, params.slug));

  const blog_post = results.at(0);

  if (!blog_post) {
    throw error(404, 'Post not found');
  }

  // Convert markdown to HTML on the server
  const content_html = await marked.parse(blog_post.markdown_content);

  return {
    post: {
      ...blog_post,
      content_html // Pass the rendered HTML to the page
    }
  };
};
```

src/routes/[slug]/+page.svelte:
```
<script lang="ts">
  import type { PageData } from './$types';

  let { data }: { data: PageData } = $props();
</script>

<div class="max-w-2xl mx-auto py-8 px-4">
  <article>
    <h1 class="text-4xl font-extrabold mb-2">{data.post.title}</h1>
    <p class="text-md text-gray-500 mb-8">
      By {data.post.author} on {new Date(data.post.created_at).toLocaleDateString()}
    </p>

    <!--
      The 'prose' class from @tailwindcss/typography will automatically
      style all the HTML elements generated from your markdown.
    -->
    <div class="prose lg:prose-xl">
      {@html data.post.content_html}
    </div>
  </article>
</div>
```